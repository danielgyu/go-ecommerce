// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServcieClient is the client API for OrderServcie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServcieClient interface {
	AddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*AddToCartResponse, error)
	RemoveFromCart(ctx context.Context, in *RemoveFromCartRequest, opts ...grpc.CallOption) (*RemoveFromCartResponse, error)
	OrderInCart(ctx context.Context, in *OrderInCartRequest, opts ...grpc.CallOption) (*OrderInCartResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type orderServcieClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServcieClient(cc grpc.ClientConnInterface) OrderServcieClient {
	return &orderServcieClient{cc}
}

func (c *orderServcieClient) AddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*AddToCartResponse, error) {
	out := new(AddToCartResponse)
	err := c.cc.Invoke(ctx, "/proto.OrderServcie/AddToCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServcieClient) RemoveFromCart(ctx context.Context, in *RemoveFromCartRequest, opts ...grpc.CallOption) (*RemoveFromCartResponse, error) {
	out := new(RemoveFromCartResponse)
	err := c.cc.Invoke(ctx, "/proto.OrderServcie/RemoveFromCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServcieClient) OrderInCart(ctx context.Context, in *OrderInCartRequest, opts ...grpc.CallOption) (*OrderInCartResponse, error) {
	out := new(OrderInCartResponse)
	err := c.cc.Invoke(ctx, "/proto.OrderServcie/OrderInCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServcieClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/proto.OrderServcie/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServcieServer is the server API for OrderServcie service.
// All implementations must embed UnimplementedOrderServcieServer
// for forward compatibility
type OrderServcieServer interface {
	AddToCart(context.Context, *AddToCartRequest) (*AddToCartResponse, error)
	RemoveFromCart(context.Context, *RemoveFromCartRequest) (*RemoveFromCartResponse, error)
	OrderInCart(context.Context, *OrderInCartRequest) (*OrderInCartResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedOrderServcieServer()
}

// UnimplementedOrderServcieServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServcieServer struct {
}

func (UnimplementedOrderServcieServer) AddToCart(context.Context, *AddToCartRequest) (*AddToCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedOrderServcieServer) RemoveFromCart(context.Context, *RemoveFromCartRequest) (*RemoveFromCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromCart not implemented")
}
func (UnimplementedOrderServcieServer) OrderInCart(context.Context, *OrderInCartRequest) (*OrderInCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderInCart not implemented")
}
func (UnimplementedOrderServcieServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedOrderServcieServer) mustEmbedUnimplementedOrderServcieServer() {}

// UnsafeOrderServcieServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServcieServer will
// result in compilation errors.
type UnsafeOrderServcieServer interface {
	mustEmbedUnimplementedOrderServcieServer()
}

func RegisterOrderServcieServer(s grpc.ServiceRegistrar, srv OrderServcieServer) {
	s.RegisterService(&OrderServcie_ServiceDesc, srv)
}

func _OrderServcie_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServcieServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrderServcie/AddToCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServcieServer).AddToCart(ctx, req.(*AddToCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderServcie_RemoveFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServcieServer).RemoveFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrderServcie/RemoveFromCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServcieServer).RemoveFromCart(ctx, req.(*RemoveFromCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderServcie_OrderInCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServcieServer).OrderInCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrderServcie/OrderInCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServcieServer).OrderInCart(ctx, req.(*OrderInCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderServcie_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServcieServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrderServcie/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServcieServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderServcie_ServiceDesc is the grpc.ServiceDesc for OrderServcie service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderServcie_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OrderServcie",
	HandlerType: (*OrderServcieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToCart",
			Handler:    _OrderServcie_AddToCart_Handler,
		},
		{
			MethodName: "RemoveFromCart",
			Handler:    _OrderServcie_RemoveFromCart_Handler,
		},
		{
			MethodName: "OrderInCart",
			Handler:    _OrderServcie_OrderInCart_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _OrderServcie_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/order.proto",
}
